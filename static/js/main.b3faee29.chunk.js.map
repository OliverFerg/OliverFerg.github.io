{"version":3,"sources":["components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["CardList","robots","Error","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","reponse","json","users","filteredRobots","filter","robot","name","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OA0BeA,EAvBG,SAAC,GAAe,EAAbC,OAEf,MAAM,IAAIC,MAAM,cCaPC,EAfG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKC,UAAU,OACf,2BACEA,UAAU,mCACVC,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCCAK,EARA,SAACC,GACd,OACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCqBEC,E,YAxBb,WAAYN,GAAQ,IAAD,8BAClB,4CAAMA,KACDO,MAAQ,CACXC,UAAU,GAHM,E,+EAQHC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAKzB,OAAIG,KAAKJ,MAAMC,SACN,uDAEFG,KAAKX,MAAMK,a,GAlBOQ,aCmDZC,G,kBA3Cb,aAAe,IAAD,8BACb,+CAeHC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEnB,YAAauB,EAAMC,OAAOC,SAfxC,EAAKX,MAAQ,CACdjB,OAAQ,GACRG,YAAa,IAJA,E,iFASK,IAAD,OAClB0B,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAGA,EAAQC,UACtBF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAAEtB,OAAQiC,S,+BASjC,IAAD,EACyBZ,KAAKJ,MAA7BjB,EADD,EACCA,OAAQG,EADT,EACSA,YACX+B,EAAiBlC,EAAOmC,QAAO,SAAAC,GACnC,OAAOA,EAAMC,KAAKC,cAAcC,SAASpC,EAAYmC,kBAGrD,OAAQtC,EAAOwC,OAGd,yBAAKnC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWD,aAAciB,KAAKI,iBAC9B,kBAAC,EAAD,KACG,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUzB,OAAQkC,OAP1B,2C,GA7BeX,cCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.b3faee29.chunk.js","sourcesContent":["import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst  CardList = ({ robots }) => {\r\n    if (true) {\r\n      throw new Error('Nooooooo!');\r\n    }\r\n    return (\r\n      <div>\r\n        {\r\n          robots.map((user, i) => {\r\n            return (\t\r\n              <Card \r\n    \t        key={i} \r\n    \t        id={robots[i].id} \r\n    \t        name={robots[i].name} \r\n    \t        email={robots[i].email}\r\n              /> \r\n            );\r\n         })\r\n       }\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n  return (\r\n  \t<div className='pa2'>\r\n\t  <input \r\n\t    className='pa3 ba b--green bg-lightest-blue'\r\n\t    type='search'\r\n\t    placeholder='search robots' \r\n\t    onChange={searchChange}\r\n\t  />\r\n\t</div>   \r\n  );\r\n}\r\n\r\n\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n  \tsuper(props);\r\n  \tthis.state = {\r\n  \t  hasError: false\r\n  \t}\r\n  }\r\n\r\n\r\ncomponentDidCatch(error, info) {\r\n\tthis.setState({ hasError: true })\r\n}\r\n\r\n\r\nrender() {\r\n  if (this.state.hasError) {\r\n  \t\treturn <h1>Ooops. That is not good</h1>\r\n  }\r\n  return this.props.children\r\n\r\n }\r\n\r\n\r\n}\r\n\r\nexport default ErrorBoundry;\r\n\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'; \r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n  \tsuper()\r\n    this.state = {\r\n\t  robots: [],\r\n\t  searchfield: ''\r\n  }\r\n}\r\n\r\n\r\ncomponentDidMount() {\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n\t .then(reponse=> reponse.json())\r\n   .then(users => {this.setState({ robots: users})});     \t\r\n}\r\n\r\n\r\nonSearchChange = (event) => {\r\n  this.setState({ searchfield: event.target.value})\t   \r\n}\r\n\r\n\r\nrender() {\r\n  const { robots, searchfield } = this.state\r\n\tconst filteredRobots = robots.filter(robot => {\r\n  \treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n  })\r\n\r\n   return !robots.length ?\r\n   <h1>Loading</h1> :\r\n   (\r\n  \t <div className='tc'>\r\n  \t   <h1 className='f1'>RoboFriends</h1>\r\n  \t   <SearchBox searchChange={this.onSearchChange}/>\r\n  \t   <Scroll>\r\n         <ErrorBoundry>\r\n           <CardList robots={filteredRobots} />\r\n         </ErrorBoundry>\r\n      </Scroll>\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';  \n\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}